<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.a5a5lab.module.order.OrderDao">

	<resultMap id="resultMapObj" type="com.a5a5lab.module.order.OrderDto"></resultMap>

	<!-- <update id="StoreCompleted">
		UPDATE `order` SET
			
	
	
	</update> -->
	
	
	
	
	
	



	<!-- 주문내역 리스트 -->
	<select id="selectList" resultMap="resultMapObj">
		select
		a.orderSeq,
		a.orderTypeCd,
		a.orderDelNy,
		c.memName,
		c.memId,
		c.memAddress,
		a.regDateTime,
		a.deliveryStatus,
		a.paymentStatus,
		a.orderStatusCd
		from
		`order` AS a
		left join member AS c ON a.member_memSeq= c.memSeq
		WHERE 1=1
		<!-- 업데이트 삭제 여부 검색 -->
	    <if test="shDelNy != null and !shDelNy.equals('')">AND a.orderDelNy = #{shDelNy}</if>  
		

		
		<!-- 날짜 검색 기능 -->
		<choose>
			<when test="shOptionDate == 1">AND a.regDateTime BETWEEN #{shDateStart} AND #{shDateEnd}</when>
			<when test="shOptionDate == 2">AND a.modDateTime BETWEEN #{shDateStart} AND #{shDateEnd}</when>
		</choose>
		
		<!-- 검색 구분 검색 -->
		<choose>
        	<when test="shOption == 1">AND c.memId LIKE CONCAT('%',#{shValue},'%')</when>
            <when test="shOption == 2">AND c.memName LIKE CONCAT('%',#{shValue},'%')</when>
            
        </choose>
        
        <!-- 검색구분 배송상태 배송전 배송완료 기능 -->
        <choose>
			<when test="deliveryS == 18">AND a.deliveryStatus BETWEEN #{deliveryS} AND #{deliveryS}</when>
			<when test="deliveryS == 19">AND a.deliveryStatus BETWEEN #{deliveryS} AND #{deliveryS}</when>
		</choose>
		
		AND a.orderTypeCd = 20
		
		 
		
		order By orderSeq DESC

		LIMIT #{rowNumToShow} OFFSET #{startRnumForMysql}
	</select>
	<!-- 주문내역 목록 업데이트 삭제-->
	<update id="uelete">
		UPDATE `order` SET
			orderDelNy = 1
		WHERE
			orderSeq IN
	    <foreach collection="list" item="id" open="(" separator="," close=")"> #{id} </foreach>
	</update>
	
	<!-- 발주내역 목록 업데이트 삭제-->
	<update id="ueleteFt">
		UPDATE `order` SET
			orderDelNy = 1
		WHERE
			orderSeq IN
	    <foreach collection="list" item="id" open="(" separator="," close=")"> #{id} </foreach>
	    AND orderTypeCd 
	    
	</update>

	<!-- 주문카운트 -->
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
		FROM
		`order`
		WHERE 1=1
		AND orderTypeCd = 20
	</select>
	<!-- 주문상세상품카운트 -->
	<select id="selectOneOrderDetailCount" resultType="Integer">
		SELECT
		COUNT(*)
		FROM
		order_detail
		WHERE 1=1
		AND order_orderSeq = #{orderSeq}
	</select>
	<!-- 상품카운트 -->
	<select id="selectOneProductCount" resultType="Integer">
		SELECT COUNT(*)
		FROM
		shoes
	</select>
	<!-- 발주 카운트 -->
	<select id="selectOneOrderingCount" resultType="Integer">
		SELECT COUNT(*)
		FROM
		`order`
		WHERE 1=1
		AND orderTypeCd = 21
	</select>

	<!-- 주문상세페이지 -->
	<!--한개의 주문번호 불러오기 -->
	<select id="selectOne" resultMap="resultMapObj">
		select
		a.orderSeq,
		c.memName,
		c.memId,
		c.memAddress,
		c.memTel,
		a.regDateTime,
		a.deliveryStatus,
		a.paymentStatus
		from
		`order` AS a
		left join member AS c ON a.member_memSeq= c.memSeq
		WHERE
		a.orderSeq= #{orderSeq}
	</select>
	<!--불러온 주문번호의 상세목록 -->
	<select id="orderDetailList" resultMap="resultMapObj">
		select
		b.orderDetailSeq,
		a.shBrandCd,
		a.shTypeCd,
		a.shSeq,
		a.shName,
		a.shSizeCd,
		b.shOrderCount,
		a.shCount,
		a.shPrice * b.shOrderCount AS sumPrice,
		c.orderSeq
		FROM
		shoes AS a
		left join order_detail AS b ON a.shSeq = b.shoes_shSeq
		left join
		`order` AS c ON c.orderSeq = b.order_orderSeq
		where
		order_orderSeq = #{orderSeq}
	</select>
	<!--주문상세목록에서 배송요청 누를시 처리상태 출고요청으로바뀌게하기 -->
	<update id="deliveryRequest">
		UPDATE `order`
		SET
		orderStatusCd = 24
		
		WHERE 1=1
		AND	orderSeq=#{orderSeq}
		
	</update>



	<!-- 창고재고관리 -->
	<select id="storageList" resultMap="resultMapObj">
		select
		shSeq,
		shName,
		shSizeCd,
		shBrandCd,
		shTypeCd,
		salesStatus,
		regDateTime,
		modDateTime,
		shDelNy,
		shCount,
		shPrice
		FROM
		shoes
		WHERE 1=1
		ORDER BY shSeq DESC
		LIMIT #{rowNumToShow} OFFSET
		#{startRnumForMysql}
	</select>

	<!-- 발주 내역 리스트 -->
	<select id="FactoryOrderList" resultMap="resultMapObj">
		select
			a.orderSeq,
		    d.shName,
		    d.shBrandCd,
		    d.shSizeCd,
		    d.shTypeCd,
		    brand.ifcdName AS shBrandName,
		    size.ifcdName AS shSizeName,
		    type.ifcdName AS shTypeName,
		    c.shOrderCount,
		    a.regDateTime,
		    b.memName,
		    a.orderStatusCd
		FROM
			`order` AS a
		left join member AS b ON a.member_memSeq = b.memSeq
		left join order_detail AS c ON a.orderSeq = c.order_orderSeq
		left join shoes AS d ON c.shoes_shSeq = d.shSeq
		
		LEFT JOIN code AS brand ON d.shBrandCd = brand.cdSeq
		LEFT JOIN code AS size  ON d.shSizeCd  = size.cdSeq
		LEFT JOIN code AS type  ON d.shTypeCd  = type.cdSeq
		
		WHERE 1=1
		
		<if test="shDelNy != null and !shDelNy.equals('')">AND a.orderDelNy = #{shDelNy}</if>
		
		<!-- 날짜 검색 기능 -->
		<choose>
			<when test="shOptionDate == 1">AND a.regDateTime BETWEEN #{shDateStart} AND #{shDateEnd}</when>
		</choose> 
		
		<!-- 검색 구분 검색 -->
		<choose>
        	<when test="shOption == 1">AND d.shName LIKE CONCAT('%',#{shValue},'%')</when>
            <when test="shOption == 2">AND brand.ifcdName LIKE CONCAT('%',#{shValue},'%')</when>
            <when test="shOption == 3">AND size.ifcdName LIKE CONCAT('%',#{shValue},'%')</when>
            <when test="shOption == 4">AND type.ifcdName LIKE CONCAT('%',#{shValue},'%')</when>
            <when test="shOption == 5">AND b.memName LIKE CONCAT('%',#{shValue},'%')</when>
            
            
        </choose>
        
        <!-- 검색구분 발주상태 입고대기 입고완료 기능 --> 
        <choose>
			<when test="orderS == 26">AND a.orderStatusCd BETWEEN #{orderS} AND #{orderS}</when>
			<when test="orderS == 27">AND a.orderStatusCd BETWEEN #{orderS} AND #{orderS}</when>
		</choose>
        
		AND	a.orderTypeCd = 21 
		
		order by orderSeq DESC
		LIMIT #{rowNumToShow} OFFSET #{startRnumForMysql}
	</select>
	
	<!-- 발주 등록하기 -->
	<insert id="insert">
		INSERT INTO 'order'(
			shName,
			shBrandCd,
			shSizeCd,
			shTypeCd,
			shOrderCount,
			regDateTime,
			memName
			
		) value (
			#{shName},
			#{shBrandCd},
			#{shSizeCd},
			#{shTypeCd},
			#{shOrderCount},
			NOW(),
			#{memName}
				
		)
		
	<selectKey resultType="String" keyProperty="orderSeq" order="AFTER">
	    SELECT last_insert_id()
	</selectKey>
	</insert>
	<!-- 주문등록폼-->
<!-- 멤버목록가져오기 -->
	<select id="selectMemberList" resultMap="resultMapObj">
	 select
	 	*
	 FROM
	 	member
	 WHERE 1=1 
	</select>
<!-- 신발목록가져오기(중복없이) -->
	<select id="selectShoesList" resultMap="resultMapObj">
	select DISTINCT
		 shName
	From
		shoes
	</select>
	
<!--주문 등록폼에서 주문넣기(트랜잭션으로 묶음) -->
	<!--memSeq를 받아서 주문번호 생성 -->
	<insert id="orderInst">
	INSERT INTO `order`(
		deliveryStatus,
		paymentStatus,
		orderTypeCd,
		orderDelNy,
		regDateTime,
		modDateTime,
		member_memSeq,
		orderStatusCd
	)VALUES(
		18,
		14,
		20,
		0,
		now(),
		now(),
		#{memSeq},
		23
		)
		<selectKey resultType="String" keyProperty="orderSeq" order="AFTER">
	    SELECT last_insert_id()
	</selectKey>
	</insert>
	
	<!-- orderSeq,shSeq,shOrderCount를 받아서 order_detail생성 -->
	<insert id="orderDetailInst">
	INSERT INTO order_detail(
		order_orderSeq,
		shoes_shSeq,
		shOrderCount
	)VALUES(
		#{orderSeq},
		#{shSeq},
		#{shOrderCount}
	)
		<selectKey resultType="String" keyProperty="orderDetailSeq" order="AFTER">
	    SELECT last_insert_id()
	</selectKey>
	</insert>
	

 
	
	<!-- 발주 등록 -->
	<insert id="orderInst1">
	INSERT INTO `order`(
		deliveryStatus,
		paymentStatus,
		orderTypeCd,
		orderDelNy,
		regDateTime,
		modDateTime,
		member_memSeq,
		orderStatusCd
	)VALUES(
		18,
		14,
		21,
		0,
		now(),
		now(),
		#{memSeq},
		26
		)
		<selectKey resultType="String" keyProperty="orderSeq" order="AFTER">
	    SELECT last_insert_id()
	</selectKey>
	</insert>	






</mapper>